#include<iostream>
#include<string.h>
using namespace std;

/**
在1到1000的自然数中，能被3或5整除的数共有多少个？
不能被3或5整除的数共有多少个？
分析：显然，这是一个重复计数问题（
当然，如果不怕麻烦你可以分别去数3的倍数，5的倍数）。
我们可以把“能被3或5整除的数”分别看成A类元素和B类元素，
能“同时被3或5整除的数（15的倍数）”就是被重复计算的数，
即“既是A类又是B类的元素”。求的是“A类或B类元素个数”。
我们还不能直接计算，必须先求出所需条件。1000÷3=333……1，
能被3整除的数有333个（想一想，这是为什么？）同理，可以求出其他的条件。


*/
int main(){
	long long int n;
	cin>>n;
	
	long long int num=0;
	
	num+=n/2+n/3+n/5+n/7;//各自整除的数

	//去重
	num-=(n/2/3+n/2/5+n/2/7+n/3/5+n/3/7+n/5/7);//两个组合
	
	num+=(n/2/3/5+n/2/3/7+n/2/5/7+n/3/5/7);//三个组合
	
	num-=(n/2/3/5/7);//全部组合
	
	cout<<n-num<<endl; 


	return 0;
}
